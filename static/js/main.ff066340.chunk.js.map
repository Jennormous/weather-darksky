{"version":3,"sources":["components/Headers.js","components/Forms.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Headers","className","Component","Forms","onSubmit","this","props","location","text","name","placeholder","id","Weather","timezone","summary","currently","temperature","locationURL","city","country","weatherURL","lat","lng","App","state","weatherData","undefined","loading","getLocation","event","preventDefault","target","elements","value","setState","axios","get","then","res","geometry","data","results","console","log","prevProps","prevState","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iRAEqBA,E,iLAEjB,OACE,6BACE,wBAAIC,UAAU,UAAd,WACA,mE,GAL6BC,aCChBC,E,iLAEjB,OACE,6BACE,kBAAC,EAAD,MACA,0BAAMF,UAAU,OAAOG,SAAUC,KAAKC,MAAMC,UAC1C,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,iBAC3C,2BACEF,KAAK,OACLC,KAAK,UACLC,YAAY,oBAEd,4BAAQC,GAAG,UAAX,qB,GAZyBT,aCDdU,E,iLAEjB,OACE,yBAAKX,UAAU,gBACb,wCAAcI,KAAKC,MAAMO,UACzB,uCAAaR,KAAKC,MAAMQ,QAAQC,UAAUD,SAC1C,2CAAiBT,KAAKC,MAAMU,YAAYD,UAAUC,kB,GANrBd,aCK/Be,EAAc,SAACC,EAAMC,GAAP,oGACqED,EADrE,cAC+EC,EAD/E,cAEdC,EAAa,SAACC,EAAKC,GAAN,gBAJH,uCAIG,6EAC8DD,EAD9D,YACqEC,EADrE,cAGEC,E,2MACnBC,MAAQ,CACNN,KAAM,YACNC,QAAS,SACTM,YAAa,GACbZ,cAAUa,EACVZ,aAASY,EACTV,iBAAaU,EACbC,SAAS,G,EAiBXC,YAAc,SAAAC,GACZA,EAAMC,iBACN,IAAIZ,EAAOW,EAAME,OAAOC,SAASd,KAAKe,MAClCd,EAAUU,EAAME,OAAOC,SAASb,QAAQc,MAC5C,EAAKC,SAAS,CACZhB,KAAMA,EACNC,QAASA,K,mFApBQ,IAAD,OAClBgB,IAAMC,IAAInB,EAAYZ,KAAKmB,MAAMN,KAAMb,KAAKmB,MAAML,UAAUkB,MAAK,SAAAC,GAC/D,IAAMC,EAAWD,EAAIE,KAAKC,QAAQ,GAAGF,SACrCG,QAAQC,IAAIL,EAAIE,MAChBL,IAAMC,IAAIhB,EAAWmB,EAASlB,IAAKkB,EAASjB,MAAMe,MAAK,SAAAC,GACrDI,QAAQC,IAAIL,EAAIE,MAChB,EAAKN,SAAS,CACZT,YAAaa,EAAIE,KACjBb,SAAS,Y,yCAgBEiB,EAAWC,GAAY,IAAD,OACvCH,QAAQC,IAAItC,KAAKmB,MAAMN,MACvBwB,QAAQC,IAAIE,GACRA,EAAU3B,MAAQ2B,EAAU1B,WAAad,KAAKmB,MAAMN,MAAQb,KAAKmB,MAAML,UACzEgB,IAAMC,IAAInB,EAAYZ,KAAKmB,MAAMN,KAAMb,KAAKmB,MAAML,UAAUkB,MAAK,SAAAC,GACnEI,QAAQC,IAAI,EAAKnB,MAAMN,MACnB,IAAMqB,EAAWD,EAAIE,KAAKC,QAAQ,GAAGF,SACrCJ,IAAMC,IAAIhB,EAAWmB,EAASlB,IAAKkB,EAASjB,MAAMe,MAAK,SAAAC,GACrD,EAAKJ,SAAS,CACZT,YAAaa,EAAIE,e,+BAQzB,OAAInC,KAAKmB,MAAMG,QAAgB,2CAE7B,yBAAK1B,UAAU,eACb,yBAAKA,UAAU,eACf,yBAAKA,UAAU,gBACf,kBAAC,EAAD,CAAOM,SAAUF,KAAKuB,cACtB,kBAAC,EAAD,CACEf,SAAUR,KAAKmB,MAAMC,YAAYZ,SACjCC,QAAST,KAAKmB,MAAMC,YACpBT,YAAaX,KAAKmB,MAAMC,oB,GA7DDvB,aCAb4C,QACW,cAA7BC,OAAOxC,SAASyC,UAEe,UAA7BD,OAAOxC,SAASyC,UAEhBD,OAAOxC,SAASyC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,kB","file":"static/js/main.ff066340.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class Headers extends Component {\n  render() {\n    return (\n      <div>\n        <h1 className=\"header\">WEATHER</h1>\n        <p>Find out what the weather is...</p>\n      </div>\n    )\n  }\n}\n","import React, { Component } from \"react\";\nimport Headers from \"./Headers\";\n\nexport default class Forms extends Component {\n  render() {\n    return (\n      <div>\n        <Headers />\n        <form className=\"form\" onSubmit={this.props.location}>\n          <input text=\"text\" name=\"city\" placeholder=\"Type city...\"></input>\n          <input\n            text=\"text\"\n            name=\"country\"\n            placeholder=\"Type country...\"\n          ></input>\n          <button id=\"submit\">Get Weather</button>\n        </form>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class Weather extends Component {\n  render() {\n    return (\n      <div className=\"weather-info\">\n        <p>Timezone: {this.props.timezone}</p>\n        <p>Summary: {this.props.summary.currently.summary}</p>\n        <p>Temperature: {this.props.temperature.currently.temperature}</p>\n      </div>\n    )\n  }\n}\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Forms from \"./components/Forms\";\nimport Weather from \"./components/Weather\";\n\nconst corsURL = \"https://cors-anywhere.herokuapp.com/\";\n\nconst locationURL = (city, country) =>\n  `https://api.opencagedata.com/geocode/v1/json?key=5101b711284845e4b187302d9718f202&q=${city}%2C${country}&pretty=1`;\nconst weatherURL = (lat, lng) =>\n  `${corsURL}https://api.darksky.net/forecast/8fbf79d142c32ccee589ac63ebebb9ad/${lat},${lng}?units=ca`;\n\nexport default class App extends Component {\n  state = {\n    city: \"Vancouver\",\n    country: \"Canada\",\n    weatherData: {},\n    timezone: undefined,\n    summary: undefined,\n    temperature: undefined,\n    loading: true\n  };\n\n  componentDidMount() {\n    axios.get(locationURL(this.state.city, this.state.country)).then(res => {\n      const geometry = res.data.results[0].geometry;\n      console.log(res.data);\n      axios.get(weatherURL(geometry.lat, geometry.lng)).then(res => {\n        console.log(res.data);\n        this.setState({\n          weatherData: res.data,\n          loading: false\n        });\n      });\n    });\n  }\n\n  getLocation = event => {\n    event.preventDefault();\n    let city = event.target.elements.city.value;\n    let country = event.target.elements.country.value;\n    this.setState({\n      city: city,\n      country: country\n    }); \n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log(this.state.city);\n    console.log(prevState);\n    if (prevState.city && prevState.country !== (this.state.city && this.state.country)) {\n      axios.get(locationURL(this.state.city, this.state.country)).then(res => {\n    console.log(this.state.city);\n        const geometry = res.data.results[0].geometry;\n        axios.get(weatherURL(geometry.lat, geometry.lng)).then(res => {\n          this.setState({\n            weatherData: res.data,\n          });\n        });\n      });\n    }\n  }\n\n  render() {\n    if (this.state.loading) return <div>Loading...</div>;\n    return (\n      <div className=\"weather-app\">\n        <div className=\"hero-image\"></div>\n        <div className=\"main-content\">\n        <Forms location={this.getLocation} />\n        <Weather\n          timezone={this.state.weatherData.timezone}\n          summary={this.state.weatherData}\n          temperature={this.state.weatherData}\n          \n        />\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./styles.css\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}